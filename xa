local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

local OrionLib = {
    Elements = {},
    ThemeObjects = {},
    Connections = {},
    Flags = {},
    Themes = {
        Default = {
            Main = Color3.fromRGB(15, 15, 15),
            Second = Color3.fromRGB(20, 20, 25),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(40, 40, 40),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(140, 140, 140)
        }
    },
    SelectedTheme = "Default",
    Folder = nil,
    SaveCfg = false
}

local Icons = {
     ["default"] = "rbxassetid://4384403532",
    ["key"] = "rbxassetid://7733965118"
   
}

local function GetIcon(IconName)
    return Icons[IconName] or "rbxassetid://7733965118 or rbxassetid://4384403532"
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.Parent = game:GetService("CoreGui")

local function AddConnection(Signal, Function)
    if not Orion.Parent then return end
    local Connection = Signal:Connect(Function)
    table.insert(OrionLib.Connections, Connection)
    return Connection
end

task.spawn(function()
    while Orion.Parent do
        wait()
    end
    for _, Connection in next, OrionLib.Connections do
        Connection:Disconnect()
    end
end)

local function MakeDraggable(DragPoint, Main)
    local Dragging, DragInput, MousePos, FramePos = false
    AddConnection(DragPoint.InputBegan, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            MousePos = Input.Position
            FramePos = Main.Position
            Input.Changed:Connect(function()
                if Input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    AddConnection(DragPoint.InputChanged, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = Input
        end
    end)
    AddConnection(UserInputService.InputChanged, function(Input)
        if Input == DragInput and Dragging then
            local Delta = Input.Position - MousePos
            Main.Position = UDim2.new(FramePos.X.Scale, FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
            TweenService:Create(Main, TweenInfo.new(0.05), {Position = Main.Position}):Play()
        end
    end)
end

local function Create(Name, Properties, Children)
    local Object = Instance.new(Name)
    for i, v in next, Properties or {} do
        Object[i] = v
    end
    for i, v in next, Children or {} do
        v.Parent = Object
    end
    return Object
end

local function CreateElement(ElementName, ElementFunction)
    OrionLib.Elements[ElementName] = function(...) return ElementFunction(...) end
end

local function MakeElement(ElementName, ...) return OrionLib.Elements[ElementName](...) end
local function SetProps(Element, Props) for Property, Value in next, Props do Element[Property] = Value end return Element end
local function SetChildren(Element, Children) for _, Child in next, Children do Child.Parent = Element end return Element end

local function ReturnProperty(Object)
    if Object:IsA("Frame") or Object:IsA("TextButton") then return "BackgroundColor3" end
    if Object:IsA("ScrollingFrame") then return "ScrollBarImageColor3" end
    if Object:IsA("UIStroke") then return "Color" end
    if Object:IsA("TextLabel") or Object:IsA("TextBox") then return "TextColor3" end
    if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then return "ImageColor3" end
    return "BackgroundColor3"
end

local function AddThemeObject(Object, Type)
    if not OrionLib.ThemeObjects then OrionLib.ThemeObjects = {} end
    if not OrionLib.ThemeObjects[Type] then OrionLib.ThemeObjects[Type] = {} end
    table.insert(OrionLib.ThemeObjects[Type], Object)
    local prop = ReturnProperty(Object)
    if OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
        Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
    else
        Object[prop] = Color3.fromRGB(255, 255, 255)
    end
    return Object
end

local function SetTheme()
    for Name, Type in pairs(OrionLib.ThemeObjects) do
        for _, Object in pairs(Type) do
            local prop = ReturnProperty(Object)
            if OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
                Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Name]
            end
        end
    end
end

local function LoadCfg(Config) end
local function SaveCfg(Name) end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1}
local BlacklistedKeys = {Enum.KeyCode.Unknown}

local function CheckKey(Table, Key)
    for _, v in next, Table do if v == Key then return true end end
end

CreateElement("Corner", function(Scale, Offset) return Create("UICorner", {CornerRadius = UDim.new(Scale or 0, Offset or 10)}) end)
CreateElement("Stroke", function(Color, Thickness) return Create("UIStroke", {Color = Color or Color3.fromRGB(255, 255, 255), Thickness = Thickness or 1}) end)
CreateElement("List", function(Scale, Offset) return Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(Scale or 0, Offset or 0)}) end)
CreateElement("Padding", function(Bottom, Left, Right, Top) return Create("UIPadding", {PaddingBottom = UDim.new(0, Bottom or 4), PaddingLeft = UDim.new(0, Left or 4), PaddingRight = UDim.new(0, Right or 4), PaddingTop = UDim.new(0, Top or 4)}) end)
CreateElement("TFrame", function() return Create("Frame", {BackgroundTransparency = 1}) end)
CreateElement("Frame", function(Color) return Create("Frame", {BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255), BorderSizePixel = 0}) end)
CreateElement("RoundFrame", function(Color, Scale, Offset) return Create("Frame", {BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255), BorderSizePixel = 0}, {Create("UICorner", {CornerRadius = UDim.new(Scale, Offset)})}) end)
CreateElement("Button", function() return Create("TextButton", {Text = "", AutoButtonColor = false, BackgroundTransparency = 1, BorderSizePixel = 0}) end)
CreateElement("ScrollFrame", function(Color, Width) return Create("ScrollingFrame", {BackgroundTransparency = 1, ScrollBarImageColor3 = Color, BorderSizePixel = 0, ScrollBarThickness = Width, Size = UDim2.new(1, 0, 1, 0), CanvasSize = UDim2.new(0, 0, 0, 0)}) end)
CreateElement("Image", function(ImageID) return Create("ImageLabel", {Image = GetIcon(ImageID) or ImageID, BackgroundTransparency = 1}) end)
CreateElement("ImageButton", function(ImageID) return Create("ImageButton", {Image = GetIcon(ImageID) or ImageID, BackgroundTransparency = 1}) end)
CreateElement("Label", function(Text, TextSize, Transparency) return Create("TextLabel", {Text = Text or "", TextColor3 = Color3.fromRGB(240, 240, 240), TextTransparency = Transparency or 0, TextSize = TextSize or 15, Font = Enum.Font.FredokaOne, RichText = true, BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left}) end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {SetProps(MakeElement("List"), {HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Bottom, Padding = UDim.new(0, 5)})}), {Position = UDim2.new(1, -25, 1, -25), Size = UDim2.new(0, 300, 1, -25), AnchorPoint = Vector2.new(1, 1), Parent = Orion})

function OrionLib:MakeNotification(NotificationConfig)
    spawn(function()
        NotificationConfig.Name = NotificationConfig.Name or "Notification"
        NotificationConfig.Content = NotificationConfig.Content or "Test"
        NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
        NotificationConfig.Time = NotificationConfig.Time or 5

        local NotificationParent = SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = NotificationHolder})
        local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 10), {Parent = NotificationParent, Size = UDim2.new(1, 0, 0, 0), Position = UDim2.new(1, -55, 0, 0), AutomaticSize = Enum.AutomaticSize.Y}), {
            MakeElement("Stroke", Color3.fromRGB(60, 60, 60), 1.2),
            MakeElement("Padding", 12, 12, 12, 12),
            SetProps(MakeElement("Image", NotificationConfig.Image), {Size = UDim2.new(0, 20, 0, 20), ImageColor3 = Color3.fromRGB(240, 240, 240), Name = "Icon"}),
            SetProps(MakeElement("Label", NotificationConfig.Name, 15), {Size = UDim2.new(1, -30, 0, 20), Position = UDim2.new(0, 30, 0, 0), Font = Enum.Font.FredokaOne, Name = "Title"}),
            SetProps(MakeElement("Label", NotificationConfig.Content, 14), {Size = UDim2.new(1, 0, 0, 0), Position = UDim2.new(0, 0, 0, 25), Font = Enum.Font.FredokaOne, Name = "Content", AutomaticSize = Enum.AutomaticSize.Y, TextColor3 = Color3.fromRGB(140, 140, 140), TextWrapped = true})
        })
        TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(0, 0, 0, 0)}):Play()
        wait(NotificationConfig.Time - 0.88)
        TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
        TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.2}):Play()
        wait(0.3)
        TweenService:Create(NotificationFrame.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play()
        TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play()
        TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play()
        wait(0.05)
        NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0), 'In', 'Quint', 0.8, true)
        wait(1.35)
        NotificationFrame:Destroy()
    end)
end

function OrionLib:Init() end

function OrionLib:MakeWindow(WindowConfig)
    WindowConfig = WindowConfig or {}
    WindowConfig.Name = WindowConfig.Name or "HelixKey System"
    WindowConfig.IntroEnabled = WindowConfig.IntroEnabled or true
    WindowConfig.IntroToggleIcon = WindowConfig.IntroToggleIcon or "rbxassetid://8834748103"
    WindowConfig.IntroText = WindowConfig.IntroText or "HelixKey Loaded"
    WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
    WindowConfig.ShowIcon = WindowConfig.ShowIcon or true
    WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"

    local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {Size = UDim2.new(1, 0, 1, -50)}), {MakeElement("List"), MakeElement("Padding", 8, 0, 0, 8)}), "Divider")
    AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function() TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16) end)

    local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {Size = UDim2.new(0.5, 0, 1, 0), Position = UDim2.new(0.5, 0, 0, 0), BackgroundTransparency = 1}), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {Position = UDim2.new(0, 9, 0, 6), Size = UDim2.new(0, 18, 0, 18)}), "Text")
    })

    local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {Size = UDim2.new(0.5, 0, 1, 0), BackgroundTransparency = 1}), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {Position = UDim2.new(0, 9, 0, 6), Size = UDim2.new(0, 18, 0, 18), Name = "Ico"}), "Text")
    })

    local DragPoint = SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 0, 50)})
    local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 10), {Size = UDim2.new(0, 150, 1, -50), Position = UDim2.new(0, 0, 0, 50)}), {
        AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(1, 0, 0, 10), Position = UDim2.new(0, 0, 0, 0)}), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(0, 10, 1, 0), Position = UDim2.new(1, -10, 0, 0)}), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(0, 1, 1, 0), Position = UDim2.new(1, -1, 0, 0)}), "Stroke"),
        TabHolder,
        SetChildren(SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 0, 50), Position = UDim2.new(0, 0, 1, -50)}), {
            AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(1, 0, 0, 1)}), "Stroke"),
            SetChildren(SetProps(MakeElement("TFrame"), {AnchorPoint = Vector2.new(0, 0.5), Size = UDim2.new(0, 32, 0, 32), Position = UDim2.new(0, 10, 0.5, 0)}), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                MakeElement("Corner", 1)
            }),
            AddThemeObject(SetProps(MakeElement("Label", "By Helix", 13), {Size = UDim2.new(1, -40, 0, 13), Position = UDim2.new(0, 50, 0, 19), Font = Enum.Font.FredokaOne, ClipsDescendants = true}), "Text")
        }),
    }), "Second")

    local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {Size = UDim2.new(1, -30, 2, 0), Position = UDim2.new(0, 25, 0, -24), Font = Enum.Font.FredokaOne, TextSize = 20}), "Text")
    local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(1, 0, 0, 1), Position = UDim2.new(0, 0, 1, -1)}), "Stroke")

    local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(15, 15, 15), 0, 10), {Parent = Orion, Position = UDim2.new(0.5, -307, 0.5, -172), Size = UDim2.new(0, 615, 0, 344), ClipsDescendants = true}), {
        SetChildren(SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 0, 50), Name = "TopBar"}), {
            WindowName,
            WindowTopBarLine,
            AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 7), {Size = UDim2.new(0, 70, 0, 30), Position = UDim2.new(1, -90, 0, 10)}), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(0, 1, 1, 0), Position = UDim2.new(0.5, 0, 0, 0)}), "Stroke"),
                CloseBtn,
                MinimizeBtn
            }), "Second"),
        }),
        DragPoint,
        WindowStuff
    }), "Main")

    if WindowConfig.ShowIcon then
        WindowName.Position = UDim2.new(0, 50, 0, -24)
        local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(0, 25, 0, 15)})
        WindowIcon.Parent = MainWindow.TopBar
    end
    MakeDraggable(DragPoint, MainWindow)

    local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {Parent = Orion, Size = UDim2.new(0, 40, 0, 40), Position = UDim2.new(0.5, -20, 0, 20), BackgroundTransparency = 0.2, BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main, Visible = false}), {
        AddThemeObject(SetProps(MakeElement("Image", WindowConfig.IntroToggleIcon), {AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0.7, 0, 0.7, 0)}), "Text"),
        MakeElement("Corner", 1)
    })

    AddConnection(CloseBtn.MouseButton1Up, function()
        MainWindow.Visible = false
        MobileReopenButton.Visible = true
        OrionLib:MakeNotification({Name = "Interface Hidden", Content = "Press Left Control to reopen", Time = 5})
        WindowConfig.CloseCallback()
    end)

    AddConnection(UserInputService.InputBegan, function(Input)
        if Input.KeyCode == Enum.KeyCode.LeftControl and not UserInputService:GetFocusedTextBox() then
            MainWindow.Visible = true
            MobileReopenButton.Visible = false
        end
    end)

    AddConnection(MobileReopenButton.Activated, function()
        MainWindow.Visible = true
        MobileReopenButton.Visible = false
    end)

    AddConnection(MinimizeBtn.MouseButton1Up, function()
        if not MainWindow then return end
        if MainWindow.Size == UDim2.new(0, 615, 0, 344) then
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0, WindowName.TextBounds.X + 140, 0, 50)}):Play()
            MinimizeBtn.Ico.Image = "rbxassetid://7072720870"
            wait(0.1)
            WindowStuff.Visible = false
            WindowTopBarLine.Visible = false
        else
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0, 615, 0, 344)}):Play()
            MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
            wait(0.02)
            MainWindow.ClipsDescendants = false
            WindowStuff.Visible = true
            WindowTopBarLine.Visible = true
        end
    end)

    local function LoadSequence()
        MainWindow.Visible = false
        local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {Parent = Orion, AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.new(0.5, 0, 0.4, 0), Size = UDim2.new(0, 28, 0, 28), ImageColor3 = Color3.fromRGB(240, 240, 240), ImageTransparency = 1})
        local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {Parent = Orion, Size = UDim2.new(1, 0, 1, 0), AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.new(0.5, 19, 0.5, 0), TextXAlignment = Enum.TextXAlignment.Center, Font = Enum.Font.FredokaOne, TextTransparency = 1})
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
        wait(0.8)
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X/2), 0.5, 0)}):Play()
        wait(0.3)
        TweenService:Create(LoadSequenceText, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
        wait(2)
        TweenService:Create(LoadSequenceText, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
        MainWindow.Visible = true
        LoadSequenceLogo:Destroy()
        LoadSequenceText:Destroy()
    end

    if WindowConfig.IntroEnabled then LoadSequence() end

    local TabFunction = {}
    function TabFunction:MakeTab(TabConfig)
        TabConfig = TabConfig or {}
        TabConfig.Name = TabConfig.Name or "Tab"
        TabConfig.Icon = TabConfig.Icon or "default"

        local TabFrame = SetChildren(SetProps(MakeElement("Button"), {Size = UDim2.new(1, 0, 0, 30), Parent = TabHolder}), {
            AddThemeObject(SetProps(MakeElement("Image", GetIcon(TabConfig.Icon)), {AnchorPoint = Vector2.new(0, 0.5), Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 10, 0.5, 0), ImageTransparency = 0.4, Name = "Ico"}), "Text"),
            AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {Size = UDim2.new(1, -35, 1, 0), Position = UDim2.new(0, 35, 0, 0), Font = Enum.Font.FredokaOne, TextTransparency = 0.4, Name = "Title"}), "Text")
        })

        local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 5), {Size = UDim2.new(1, -150, 1, -50), Position = UDim2.new(0, 150, 0, 50), Parent = MainWindow, Visible = false, Name = "ItemContainer"}), {MakeElement("List", 0, 6), MakeElement("Padding", 15, 10, 10, 15)}), "Divider")
        AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function() Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30) end)

        if not TabHolder:FindFirstChild("Tab1") then
            TabFrame.Ico.ImageTransparency = 0
            TabFrame.Title.TextTransparency = 0
            TabFrame.Title.Font = Enum.Font.FredokaOne
            Container.Visible = true
        end

        AddConnection(TabFrame.MouseButton1Click, function()
            for _, Tab in next, TabHolder:GetChildren() do if Tab:IsA("TextButton") then Tab.Title.Font = Enum.Font.FredokaOne Tab.Ico.ImageTransparency = 0.4 Tab.Title.TextTransparency = 0.4 end end
            for _, ItemContainer in next, MainWindow:GetChildren() do if ItemContainer.Name == "ItemContainer" then ItemContainer.Visible = false end end
            TabFrame.Ico.ImageTransparency = 0
            TabFrame.Title.TextTransparency = 0
            TabFrame.Title.Font = Enum.Font.FredokaOne
            Container.Visible = true
        end)

        local function GetElements(ItemParent)
            local ElementFunction = {}
            function ElementFunction:AddButton(ButtonConfig)
                ButtonConfig = ButtonConfig or {Name = "Button", Callback = function() end, Icon = "default"}
                local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 5), {Size = UDim2.new(1, 0, 0, 33), Parent = ItemParent}), {
                    AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {Size = UDim2.new(1, -12, 1, 0), Position = UDim2.new(0, 12, 0, 0), Font = Enum.Font.FredokaOne, Name = "Content"}), "Text"),
                    AddThemeObject(SetProps(MakeElement("Image", GetIcon(ButtonConfig.Icon)), {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(1, -30, 0, 7)}), "TextDark"),
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    SetProps(MakeElement("Button"), {Size = UDim2.new(1, 0, 1, 0), Name = "ButtonInteract"})
                }), "Second")
                AddConnection(ButtonFrame.ButtonInteract.MouseButton1Click, function()
                    if not UserInputService:GetFocusedTextBox() then
                        ButtonConfig.Callback()
                    end
                end)
                return {Set = function(Text) ButtonFrame.Content.Text = Text end}
            end

            function ElementFunction:AddToggle(ToggleConfig)
                ToggleConfig = ToggleConfig or {Name = "Toggle", Default = false, Callback = function(Value) end, Icon = "default"}
                local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 5), {Size = UDim2.new(1, 0, 0, 33), Parent = ItemParent}), {
                    AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {Size = UDim2.new(1, -50, 1, 0), Position = UDim2.new(0, 12, 0, 0), Font = Enum.Font.FredokaOne, Name = "Content"}), "Text"),
                    AddThemeObject(SetProps(MakeElement("Image", GetIcon(ToggleConfig.Icon)), {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(1, -70, 0, 7)}), "TextDark"),
                    AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(40, 40, 40), 0, 5), {Size = UDim2.new(0, 40, 0, 20), Position = UDim2.new(1, -40, 0, 7)}), {
                        MakeElement("Stroke"),
                        SetProps(MakeElement("Button"), {Size = UDim2.new(1, 0, 1, 0), Name = "ToggleButton"}),
                        SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(100, 100, 100), 0, 5), {Size = UDim2.new(0, 16, 0, 16), Position = UDim2.new(0, 2, 0, 2), Name = "ToggleIndicator"}), {
                            MakeElement("Stroke")
                        })
                    }), "Second")
                }), "Second")
                local ToggleState = ToggleConfig.Default
                local ToggleIndicator = ToggleFrame:FindFirstChild("ToggleButton"):FindFirstChild("ToggleIndicator")
                if ToggleState then
                    ToggleIndicator.Position = UDim2.new(0, 22, 0, 2)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                end
                AddConnection(ToggleFrame.ToggleButton.MouseButton1Click, function()
                    if not UserInputService:GetFocusedTextBox() then
                        ToggleState = not ToggleState
                        TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {Position = UDim2.new(0, ToggleState and 22 or 2, 0, 2)}):Play()
                        TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {BackgroundColor3 = ToggleState and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)}):Play()
                        ToggleConfig.Callback(ToggleState)
                    end
                end)
                return {Set = function(Value) ToggleState = Value; ToggleIndicator.Position = UDim2.new(0, ToggleState and 22 or 2, 0, 2); ToggleIndicator.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100); ToggleConfig.Callback(ToggleState) end}
            end

            function ElementFunction:AddSlider(SliderConfig)
                SliderConfig = SliderConfig or {Name = "Slider", Min = 0, Max = 100, Default = 50, Callback = function(Value) end, Icon = "default"}
                local SliderValue = SliderConfig.Default
                local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 25), 0, 5), {Size = UDim2.new(1, 0, 0, 50), Parent = ItemParent}), {
                    AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {Size = UDim2.new(1, -12, 0, 20), Position = UDim2.new(0, 12, 0, 0), Font = Enum.Font.FredokaOne, Name = "Content"}), "Text"),
                    AddThemeObject(SetProps(MakeElement("Image", GetIcon(SliderConfig.Icon)), {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(1, -30, 0, 0)}), "TextDark"),
                    AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(40, 40, 40), 0, 5), {Size = UDim2.new(1, -24, 0, 6), Position = UDim2.new(0, 12, 0, 30)}), {
                        MakeElement("Stroke"),
                        SetProps(MakeElement("Button"), {Size = UDim2.new(1, 0, 1, 0), Name = "SliderBar"}),
                        SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(0, 255, 0), 0, 5), {Size = UDim2.new(0, 0, 1, 0), Name = "Fill"}), {
                            MakeElement("Stroke")
                        }),
                        SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(100, 100, 100), 0, 5), {Size = UDim2.new(0, 10, 0, 10), AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.new(0, 0, 0.5, 0), Name = "Handle"}), {
                            MakeElement("Stroke")
                        })
                    }), "Second"),
                    AddThemeObject(SetProps(MakeElement("Label", tostring(SliderValue), 14), {Size = UDim2.new(0, 50, 0, 20), Position = UDim2.new(1, -60, 0, 30), Font = Enum.Font.FredokaOne, Name = "ValueLabel"}), "Text")
                }), "Second")
                local SliderBar = SliderFrame:FindFirstChild("SliderBar")
                local Fill = SliderBar:FindFirstChild("Fill")
                local Handle = SliderBar:FindFirstChild("Handle")
                local ValueLabel = SliderFrame:FindFirstChild("ValueLabel")
                local function UpdateSlider(Input)
                    local SizeX = math.clamp((Input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                    SliderValue = math.floor(SliderConfig.Min + (SliderConfig.Max - SliderConfig.Min) * SizeX)
                    Fill.Size = UDim2.new(SizeX, 0, 1, 0)
                    Handle.Position = UDim2.new(SizeX, 0, 0.5, 0)
                    ValueLabel.Text = tostring(SliderValue)
                    SliderConfig.Callback(SliderValue)
                end
                AddConnection(SliderBar.InputBegan, function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 and not UserInputService:GetFocusedTextBox() then
                        UpdateSlider(Input)
                        local MoveConnection
                        MoveConnection = AddConnection(UserInputService.InputChanged, function(Input)
                            if Input.UserInputType == Enum.UserInputType.MouseMovement then
                                UpdateSlider(Input)
                            end
                        end)
                        AddConnection(UserInputService.InputEnded, function(Input)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                MoveConnection:Disconnect()
                            end
                        end)
                    end
                end)
                return {Set = function(Value) SliderValue = math.clamp(Value, SliderConfig.Min, SliderConfig.Max); Fill.Size = UDim2.new((SliderValue - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min), 0, 1, 0); Handle.Position = UDim2.new((SliderValue - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min), 0, 0.5, 0); ValueLabel.Text = tostring(SliderValue); SliderConfig.Callback(SliderValue) end}
            end

            return ElementFunction
        end

        local ElementFunction = {}
        function ElementFunction:AddSection(SectionConfig)
            SectionConfig.Name = SectionConfig.Name or "Section"
            local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 0, 26), Parent = Container}), {
                AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {Size = UDim2.new(1, -12, 0, 16), Position = UDim2.new(0, 0, 0, 3), Font = Enum.Font.FredokaOne}), "TextDark"),
                SetChildren(SetProps(MakeElement("TFrame"), {AnchorPoint = Vector2.new(0, 0), Size = UDim2.new(1, 0, 1, -24), Position = UDim2.new(0, 0, 0, 23), Name = "Holder"}), {MakeElement("List", 0, 6)})
            })
            AddConnection(SectionFrame.Holder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                SectionFrame.Size = UDim2.new(1, 0, 0, SectionFrame.Holder.UIListLayout.AbsoluteContentSize.Y + 31)
                SectionFrame.Holder.Size = UDim2.new(1, 0, 0, SectionFrame.Holder.UIListLayout.AbsoluteContentSize.Y)
            end)
            for i, v in next, GetElements(SectionFrame.Holder) do ElementFunction[i] = v end
            return ElementFunction
        end
        return ElementFunction
    end
    return TabFunction
end

function OrionLib:Destroy()
    Orion:Destroy()
end

return OrionLib
